//
//  CropViewController.swift
//  MotorImages
//
//  Created by iris on 07/07/20.
//  Copyright (c) 2020 iris. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CropDisplayLogic: class
{
  func displayImage(viewModel: Crop.Something.ViewModel)
	func displayCropFinish()
}

class CropViewController: UIViewController, CropDisplayLogic,UIGestureRecognizerDelegate {
	
	
  var interactor: CropBusinessLogic?
  var router: (NSObjectProtocol & CropRoutingLogic & CropDataPassing)?
	@IBOutlet weak var imageView: UIImageView!
	@IBOutlet weak var bottomLeft: UIImageView!
	@IBOutlet weak var topLeft: UIImageView!
	@IBOutlet weak var topRight: UIImageView!
	@IBOutlet weak var bottomRight: UIImageView!
	@IBOutlet weak var left: UIImageView!
	@IBOutlet weak var top: UIImageView!
	@IBOutlet weak var botom: UIImageView!
	@IBOutlet weak var right: UIImageView!
	@IBOutlet weak var imageCentral: UIImageView!
  // MARK: Object lifecycle
	var puntoInicio: CGPoint = CGPoint(x: 0, y: 0)
	@IBOutlet var panGesture: UIPanGestureRecognizer!
	var workView : UIImageView? = nil
	var imageCGImage : CGImage? = nil
	var cuadroVerde : CGRect = CGRect.zero
	
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?){
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder){
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup(){
    let viewController = self
    let interactor = CropInteractor()
    let presenter = CropPresenter()
    let router = CropRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad(){
    super.viewDidLoad()
		panGesture = UIPanGestureRecognizer(target: self, action: #selector(panDetected(sender:)))
		view?.addGestureRecognizer(panGesture!)
		panGesture?.delegate = self
		imageRedonda()
		imageCentralComportamiento()
		getImage()
  }
  // MARK: Do something
	override func viewDidAppear(_ animated: Bool) {
		super.viewDidAppear(true)
	}
	override func viewWillAppear(_ animated: Bool) {
		super.viewWillAppear(animated)
		navigationController?.setNavigationBarHidden(false, animated: false)
		navigationController?.interactivePopGestureRecognizer?.isEnabled = false
	}
  
  func getImage(){
    let request = Crop.Something.Request()
    interactor?.displayImageToCrop(request: request)
  }
  
  func displayImage(viewModel: Crop.Something.ViewModel){
	imageView.image = viewModel.imagenRecibida
	imageCGImage = viewModel.imagenRecibidaCG
	}
	func displayCropFinish() {
		router?.routeToDocumentViewController()
	}
	@IBAction func cutImage(_ sender: Any) {
		let calculo = calculoRect()
		let request = Crop.CropImage.Request(originalImage: imageView.image!, originalImageCG: imageCGImage!, cutFrame: calculo)
		self.interactor?.cropImage(request: request)
		}
}

